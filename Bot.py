import discord
from discord.ext import commands
from discord import app_commands

client = commands.Bot(command_prefix="!", intents=discord.Intents.all())
client.remove_command("help")
tree = client.tree

@client.event
async def on_ready():
    print(f"Learn Py now online with {round(client.latency * 1000)}ms ping.")

@tree.command(name="setup", description="How to get started")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def setup(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Setup", colour=0x000000, description="""Firstly to begin working with Python, you will first need to install it.\nYou can do so by heading to the official website and getting the installer.\nIt is recommend to use the most recent version; https://www.python.org/downloads/\nOnce installed you'll need to run the file and complete the setup.\nYou have now successfully downloaded Python!\n\nYou will now need to install an IDE (Integrated Development Environment (where you write your cdode)) to begin writing your code.\nVisual Studio Code is recommended as it is lightweight, fast, and easy to learn/use.\nIt's a great software that most developers use, and you can get it here; https://code.visualstudio.com/download\nComplete the setup and move over to the "Extensions" tab.\nOnce there, type "Python" then download the "Python Extension Pack" By Don Jayamanne.\nIt has everything you will need to begin coding with Python using VSC.\nOnce installed, go ahead and create a new file, then set the file extension to `.py`\nIt is very important your file ends in `.py` as that declares the file as a python source file.\nYou are now ready to begin working with Pytho. Good luck!""").set_author(name="More Info", url="https://www.w3schools.com/python/python_getstarted.asp"))

lesson = app_commands.Group(name="lesson", description="Lessons")
tree.add_command(lesson)

@lesson.command(name="one", description="In/Outputs")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def one(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Output", colour=0x000000, description="""The very first thing you learn in most programming languages is how to output, or more formally known as printing to console.\nThis is made extremely simple in Python, without any installs, imports or anything, just a single line of code;```py\nprint("Hello, World!")\n```Which will have the following look on your command line;```\nHello, World!\n```The print function is extremely simple to understand,\nAll you have to write is `print()` and put whatever you wish to log to your console in quotations marks inside of the brackets.\nPutting anything inside of the brackets is optional, though this will just print an empty line.""").set_author(name="More Info", url="https://www.w3schools.com/python/python_getstarted.asp").set_footer(text="Lesson 1 - In/Outputs - Part 1/2"))
    msg = await interaction.original_response()
    await msg.reply(embed=discord.Embed(title="Input", colour=0x000000, description="""Very similarly to the `print()` function that was just covered, you can easily take input from the console with the following;```py\ninput("Prompt:")\n```Which will create something that looks like this on your command line;```\nPrompt:\n```Then you can type something into your command line and enter it.\nThe Python input function is just as simple to understand as the print one,\nWhatever you put in the quotation marks inside of the brackets will be the prompt, though similarly to printing, putting something inside of the brackets is optional, which will have the result of nothing appearing but still allowing for the user to type.""").set_author(name="More Info", url="https://www.w3schools.com/python/python_user_input.asp").set_footer(text="Lesson 1 - In/Outputs - Part 2/2"))

@lesson.command(name="two", description="Datatypes")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def two(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Strings", colour=0x000000, description="""In Python, strings are as simple as putting anything in between apostrophes or quotation marks.\nThere are several ways to do this;```py\n\"\"\"A string inside of three quotation marks\"\"\"\n'''A string inside of three apostrophes'''\n"A string inside of one quotation mark"\n'A string inside of one apostrophe'\n```These are all pretty much the same. The only times you will be needing to find yourself using these different types is if you expect to use both apostrophes and quotation marks inside of your string, as placing a quotation mark inside the third type would just end the string, the same result would happen with using an apostrophe in the fourth one.\nIt is best practise to just put your strings `"inside of quotation marks"`""").set_author(name="More Info", url="https://www.w3schools.com/python/python_ref_string.asp").set_footer(text="Lesson 2 - Datatypes - Part 1/5"))
    msg = await interaction.original_response()
    msg2 = await msg.reply(embed=discord.Embed(title="Integers", colour=0x000000, description="An integer is as simple as a non-decimal number.\nAs long as the number is whole, no matter whether it is positive or negative, it is an integer.```py\n12345\n```It is important to remember to keep your integers bare, as putting them around quotation marks would turn them into a string.").set_author(name="More Info", url="https://www.w3schools.com/python/python_numbers.asp").set_footer(text="Lesson 2 - Datatypes - Part 2/5"))
    msg3 = await msg2.reply(embed=discord.Embed(title="Floats", colour=0x000000, description="A float follows the same rules as an integer, it can be negative or positive, just as long as it has a decimal point and numbers after it.```py\n#For further reference, anything after a hashtag is a comment as long as it's on the same line.\n12.345\n```Again, like integers, keep your floats out of quotation marks.").set_author(name="More Info", url="https://www.w3schools.com/python/python_numbers.asp").set_footer(text="Lesson 2 - Datatypes - Part 3/5"))
    msg4 = await msg3.reply(embed=discord.Embed(title="Bools", colour=0x000000, description="A bool, short for boolean has one of two values;```py\nTrue\n#Or\nFalse\n```Once again, ensure that your bools stay out of quotes.").set_author(name="More Info", url="https://www.w3schools.com/python/python_booleans.asp").set_footer(text="Lesson 2 - Datatypes - Part 4/5"))
    await msg4.reply(embed=discord.Embed(title="Casting", colour=0x000000, description="""Within Python, you can cast a value to turn it into a different datatype. For example;```py\nmyString = "12345"\n```The above variable `myString` can be turned from a string to an integer;```py\nmyNewString = int(myString)\n```This is especially useful as sometimes you may want a user to input something, and no matter what, the input will be a string, so if you're planning to use the user's input for math or anything that requires integer values, you can cast the variable set to their input to an integer and use it as one.\nAdditional examples;```py\nmyString = "12345"\nanotherString = "67.89"\naThirdString = "True"\n\nanInteger = int(myString)\naFloat = float(anotherString)\naBool = bool(aThirdString)\n```The above would give you three variables of their rsepective datatype, and useable as so.""").set_author(name="More Info", url="https://www.w3schools.com/python/python_casting.asp").set_footer(text="Lesson 2 - Datatypes - Part 5/5"))

@lesson.command(name="three", description="Variables")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def three(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Assignment", colour=0x000000, description="""Within programming, variables are as easy to understand as just containers which store values.\nPython makes it as easy as;```py\nmyVariable = "A string"\n````yourVarialeName = yourValue`\nEnsure  you follow these rules when naming your variable;```\nStart with a letter or an underscore,\nNot start with a number,\nOnly contains alpha-numeric characters and underscores,\n```Please keep in mind that variable names are case-sensitive, e.g. age, Age & AGE are three different variables.""").set_author(name="More Info", url="https://www.w3schools.com/python/python_variables.asp").set_footer(text="Lesson 3 - Variables - Part 1/2"))
    msg = await interaction.original_response()
    await msg.reply(embed=discord.Embed(title="Usage", colour=0x000000, description="""There are a wide range of ways to use variables, but in this scenario, we'll pretend that you set a variable named `coolVar` to the value of `"I am very cool"`;```py\nprint(coolVar)\n```Will give you the output;```\nI am very cool\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_variables.asp").set_footer(text="Lesson 3 - Variables - Part 2/2"))

@lesson.command(name="four", description="Operators")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def four(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Addition", colour=0x000000, description="Math is a pretty simple and easy concept within Python, allowing for you to write code without even having to think about it;```py\n2 + 3\n```Would return `5`").set_author(name="More Info", url="https://www.w3schools.com/python/python_operators.asp").set_footer(text="Lesson 4 - Operators - Part 1/5"))
    msg = await interaction.original_response()
    msg2 = await msg.reply(embed=discord.Embed(title="Subtraction", colour=0x000000, description="Math is extremely intuitive with Python, by design;```py\n3 - 1\n```Returning `1`").set_author(name="More Info", url="https://www.w3schools.com/python/python_operators.asp").set_footer(text="Lesson 4 - Operators - Part 2/5"))
    msg3 = await msg2.reply(embed=discord.Embed(title="Multiplication", colour=0x000000, description="You can also set a variable to your answer;```py\nanswer = 2 * 10\n```Returning `20`").set_author(name="More Info", url="https://www.w3schools.com/python/python_operators.asp").set_footer(text="Lesson 4 - Operators - Part 3/5"))
    msg4 = await msg3.reply(embed=discord.Embed(title="Division", colour=0x000000, description="You can further expand upon this;```py\nnewAnswer = answer / 5\n```Returning `4`").set_author(name="More Info", url="https://www.w3schools.com/python/python_operators.asp").set_footer(text="Lesson 4 - Operators - Part 4/5"))
    await msg4.reply(embed=discord.Embed(title="Exponentiation", colour=0x000000, description="And you can forget numbers and just use variables;```py\nanswer ** newAnswer\n```Returning `160000`").set_author(name="More Info", url="https://www.w3schools.com/python/python_operators.asp").set_footer(text="Lesson 4 - Operators - Part 5/5"))

@lesson.command(name="five", description="Functions")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def five(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Creation", colour=0x000000, description="""Functions are as simple as a block of code which can be executed at will,\nIn fact, you've been using them this entire time!\n`print()` & `input()` are two functions that are pre-defined and built into Python that you've been using.\nTo make your own function with the name `myFunction`, you can do the following;```py\ndef myFunction():\n    print("Hello, World!")\n```The above code if ran will not actually do anything, as the function is not called (covered in next message), but if it were to be ran, the following would be seen on your console;```\nHello, World!\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_functions.asp").set_footer(text="Lesson 5 - Functions - Part 1/2"))
    msg = await interaction.original_response()
    await msg.reply(embed=discord.Embed(title="Running", colour=0x000000, description="We will be re-using the previous message's function in this.\nTo actually run a function within Python, you can do the following;```py\nmyFunction()\n```Which will then trigger all of the code within your function.\nThis is especially useful as you don't have to write out your code multiple times for each time you want it to be run, you can just call your function with the above line.\nThe best part is that there is no limit to how many times your function can be called.").set_author(name="More Info", url="https://www.w3schools.com/python/python_functions.asp").set_footer(text="Lesson 5 - Functions - Part 2/2"))

@lesson.command(name="six", description="Parameters")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def six(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Usage", colour=0x000000, description="You may have not noticed it yet, but you have been using parameters since the start of this course.\nThe functions `print()` and `input()` both take parameters, with the print function taking in many types of parameters, but we're just inputting one which is a string, that sends something to the console. The input only takes in one parameter which as we used before is the prompt.\nParameters can be found as what's inside of the brackets after a function;```py\nmyFunction(myParameter)\n```The above would be setting off the function `myFunction()` with the parameter `myParameter`").set_author(name="More Info", url="https://www.w3schools.com/python/python_functions.asp").set_footer(text="Lesson 6 - Parameters - Part 1/2"))
    msg = await interaction.original_response()
    await msg.reply(embed=discord.Embed(title="Implementation", colour=0x000000, description="""To use parameters in your functions, you can simply add the parameters and the names you want to use for them when defining the function in the brackets;```py\ndef myFunction(myParameter):\n```Which you can use as a variable later on in the function. You can have an unlimited amount of parameters for your function, as long as you have a comma after each function, but don't have one for the last parameter.\nYou can also set a default for your variable if one isn't specified when calling the function;```py\ndef myFunction(myVariable = "Default Text"):\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_functions.asp").set_footer(text="Lesson 6 - Parameters - Part 2/2"))

@lesson.command(name="seven", description="Data Structures")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def seven(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Lists", colour=0x000000, description="""Python supports two data structures, one of which being lists. Lists are as simple to understand as variables; they're similar in the way that variables store information and hold a value, lists just do that but they hold multiple values. They can be assigned to a variable and can hold other variables including other lists. An example list may look like this;```py\nmyVariable = "Cool text"\nmyList = [myVariable, "String", 12345, 67.89, True, False]\n```They can be accessed by referring to the variable name storing the list then square brackets after it with the number of which item you want to access-1\nPython has a very strange way of counting, in which it starts from 0, as most other high level programming languages do. So in the above list, to get `True`, you would do;```py\nmyList[4]\n```As `True` is the fifth item in the list, and you need to minus 1 from it's position.""").set_author(name="More Info", url="https://www.w3schools.com/python/python_lists.asp").set_footer(text="Lesson 7 - Data Structures - Part 1/3"))
    msg = await interaction.original_response()
    msg2 = await msg.reply(embed=discord.Embed(title="Tuples", colour=0x000000, description="""Tuples are practically the same as lists, except when creating them, you use normal brackets;```py\nmyTuple = ("String", 12345, 67.89, True, False)\n```The major difference between the two is that tuples cannot be changed after creation.""").set_author(name="More Info", url="https://www.w3schools.com/python/python_tuples.asp").set_footer(text="Lesson 7 - Data Structures - Part 2/3"))
    await msg2.reply(embed=discord.Embed(title="Dictionaries", colour=0x000000, description="""The second type of data structure in Python is dictionaries.\nThey have some similar properties to lists, but also work different in an extremely useful way.\nThey work in the same way you would see json information stored within Javascript. If you don't know javascript or know what json is, that's fine, a simple explanation of dictionaries is that they're a list of keys and values, for example;```py\nmyDict = {\n    "myKey": "myValue"\n}\n```In this example we have a dictionary under the variable name `myDict` and it holds one key `myKey` which holds one value `myValue`\nTo get thevalue from the key, you would do the following;```py\nmyValue = myDict[myKey]\n```And it would return `myValue`\nJson can get extremely complicated, and hold unspeakable amounts of data, like so;```py\n{\n    "people": {\n        "John": {\n            "id": 1,\n            "balance": 32.00,\n            "recent": "chair"\n        },\n        "Amelia": {\n            "id": 2,\n            "balance": 13.23,\n            "recent": "table"\n        },\n        "Simon": {\n            "id": 3,\n            "balance": 528.10,\n            "recent": "plate"\n        }\n    }\n}\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_dictionaries.asp").set_footer(text="Lesson 7 - Data Structures - Part 3/3"))

@lesson.command(name="eight", description="Conditionals")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def eight(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Comparisons", colour=0x000000, description="You can use the following set of operators for comparions:```py\n==   #Equals to\n!=   #Not equals to\n>=   #Greater than or equal to\n<=   #Less than or equal to\n>    #Greater than\n<    #less than\n```").set_author(name="More Info", url="https://www.w3schools.com/python/python_conditions.asp").set_footer(text="Lesson 8 - Conditionals - Part 1/5"))
    msg = await interaction.original_response()
    msg2 = await msg.reply(embed=discord.Embed(title="If", colour=0x000000, description="""Conditionals in Python are as most other things, super self-explainable and intuitive;```py\nmyVar = 5\nif myVar == 5:\n    print("Your variable is 5!")\n```Another way to check stuff is using `in` to check if your item is in a list;```py\nif myVar in range(10):\n    print("Your variable is between 0 and 9!")\n\nmyList = [0, 2, 5, 7, 10]\nif myVar in myList:\n    print("Your variable is in your list!")\n\nif myVar in [0, 2, 5, 7, 10]:\n    print("Your variable is in the list of numbers 0, 2, 5, 7 & 10!")\n```(Remember that Python starts counting from 0 when using `range`!)\nYou can also check multiple if things in one line using `and` which will only be triggered if all conditions are met;```py\nif myVar > 3 and myVar < 7:\n     print("Your variables is between the numbers 3 and 7!")\n```You can also use `or` to trigger the if statement as long as at least one condition is met;```py\nif type(myVar) == str or type(myVar) == int:\n    print("Your variable is either a string or integer!")""").set_author(name="More Info", url="https://www.w3schools.com/python/python_conditions.asp").set_footer(text="Lesson 8 - Conditionals - Part 2/5"))
    msg3 = await msg2.reply(embed=discord.Embed(title="Else", colour=0x000000, description="""So, let's say you want something to happen if your condition is not met, you can do this by using the `else`;```py\nmyVar = "String"\nif type(myVar) == int:\n    print("Your variable is an integer!")\nelse:\n    print("Your variable is not an integer!")\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_conditions.asp").set_footer(text="Lesson 8 - Conditionals - Part 3/5"))
    msg4 = await msg3.reply(embed=discord.Embed(title="Elif", colour=0x000000, description="""If you want to have if statements in your else, but aren't particularly looking to nest a bunch of them and have your code look messy, you can use `elif`;```py\nmyList = ["String", 12345, 67.89, True, False]\nif len(myList) < 5:\n    print("Your list has less than 5 items!")\nelif len(mylist) < 10:\n    print("Your list has less than 10 items!")\nelse:\n    print("Your list has more than 10 items!")\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_conditions.asp").set_footer(text="Lesson 8 - Conditionals - Part 4/5"))
    await msg4.reply(embed=discord.Embed(title="One-Liners", colour=0x000000, description="""If you want to have your if-else statements in fancy one-liners, you can;```py\nmyVar = 5\nprint("Your variable is smaller than 3!") if myVar < 3 else print("Your variable is not smaller than 3!")\n```You can actually have multiple if-else statements using this method;```py\nmyVar = 7\nprint("Your variable is smaller than 5!") if myVar < 5 else print("Your variable is not smaller than 5!") if myVar < 10 print("Your variable is also smaller than 10!") else print("Your variable is also not smaller than 10!")\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_conditions.asp").set_footer(text="Lesson 8 - Conditionals - Part 5/5"))

@lesson.command(name="nine", description="Logging")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def nine(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Logging", colour=0x000000, description="""Logging within Python is an extremely useful and important tool, and can save you from a lot of headache in the future, the main way you can use it is to check variable values to ensure they are the type you expect them to be, etc;```py\n#A few ways to print variables;\nmyVar = 5\nprint(f"Variable value: {myVar}") #F-string method\nprint("Variable value:", myVar) #New arg method\nprint("Variable value: " + myVar) #Concatenation method\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_string_formatting.asp").set_footer(text="Lesson 9 - Logging - Part 1/1"))

@lesson.command(name="ten", description="Loops")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def ten(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="For", colour=0x000000, description="""A loop is where you either iterate through instructions infinitely, or a set amount of times.\nTo iterate a set amount of times or through for example, a list, you can use a `for` loop;```py\nfor iteration in range(10):\n    print(f"Iteration {iteration}")\n\nmyList = ["String", 12345, 67.89, True, False]\nfor iteration in myList:\n    print(f"Iterating through {iteration}")\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_for_loops.asp").set_footer(text="Lesson 10 - Loops - Part 1/2"))
    msg = await interaction.original_response()
    await msg.reply(embed=discord.Embed(title="While", colour=0x000000, description="""A while loop will indefinitely run until a certain condition is no longer met. For example;```py\nmyVar = 1\nwhile myVar < 5:\n    print(f"Iteration {myVar}")\n    myVar += 1 #Adds 1\n```Or for an infinitely running loop;```py\nmyVar = 1\nwhile True:\n    print(f"Iteration {myVar}")\n    myVar += 1\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_while_loops.asp").set_footer(text="Lesson 10 - Loops - Part 2/2"))

@lesson.command(name="eleven", description="Try/Except")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def eleven(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Usage", colour=0x000000, description="When working with potentially problematic code, you can use `Try`/`Except` to avoid crashing your entire script over 1 error;```py\ntry:\n    print(5/0)\nexcept:\n    #If you want to have an empty if, try or except statement, you can use pass to avoid an error\n    pass\n```").set_author(name="More Info", url="https://www.w3schools.com/python/python_try_except.asp").set_footer(text="Lesson 11 - Try/Except - Part 1/3"))
    msg = await interaction.original_response()
    msg2 = await msg.reply(embed=discord.Embed(title="Errors", colour=0x000000, description="If you want to be informed of your error you can do the following;```py\ntry:\n    print(5/0)\nexcept Exception as error:\n    raise error\n```Which will still alert you of your error in the console, but won't crash your script.").set_author(name="More Info", url="https://www.w3schools.com/python/python_try_except.asp").set_footer(text="Lesson 11 - Try/Except - Part 2/3"))
    await msg2.reply(embed=discord.Embed(title="Additional Syntax", colour=0x000000, description="""You can also use `else` and `finally` to do something if no error occurs and to do something after the entire `Try`/`Except` respectively;```py\ntry:\n    print(10/5)\nexcept Exception as error:\n    raise error\nelse:\n    print("No error occurred!")\nfinally:\n    print("The try/except is complete!")\n```""").set_author(name="More Info", url="https://www.w3schools.com/python/python_try_except.asp").set_footer(text="Lesson 11 - Try/Except - Part 3/3"))

@lesson.command(name="twelve", description="Lambda")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def twelve(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Usage", colour=0x000000, description="In Python a lambda is pretty much a mini function. It is limited to one line and returns the result. They are oftenly used as a check, though can be used for many other things, for example;```py\nmyLambda = lambda param : param * 2\nprint(myLambda(3))\n```Which would return 6, or if you would like to use it as a check;```py\nmyLambda = lambda param : param == 5\nprint(myLambda(5))\n```The would return `True`").set_author(name="More Info", url="https://www.w3schools.com/python/python_lambda.asp").set_footer(text="Lesson 12 - Lambda - Part 1/1"))

@lesson.command(name="thirteen", description="Classes")
@app_commands.check(lambda interaction : 1061483492631912448 in [el.id for el in interaction.user.roles])
async def thirteen(interaction : discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(title="Usage", colour=0x000000, description="""To create a class in Python you can do the following;```py\nclass MyClass:\n```As most other things, quite simple.\nThis is especially useful since you can use these for organisation, somewhat similar to functions. You can store functions, variables, and much more inside of classes;```py\nclass MyClass:\n    myVar = 5\n    myFunc(parameter):\n        print(f"Your parameter: {parameter}")\n\n#You can call/use it like this;\nprint(MyClass.myVar)\n#This will print 5\nMyClass.myFunc(Class.myVar)\n#This will print Your parameter: 5\n```You can use classes to create objects, you can also use `self` if you want to have attributes which are usable in functions throughout the class, etc. This is especially useful for making games like rpgs, adventure games, and much more, as you can store information like an inventory, health, shield, and so on and so forth.""").set_author(name="More Info", url="https://www.w3schools.com/python/python_classes.asp").set_footer(text="Lesson 13 - Classes - Part 1/1"))

@client.command()
@commands.check(lambda ctx : ctx.author.id == 301014178703998987)
async def connect(ctx):
    await tree.sync()

client.run("MTA2MTUwMzg3MzE0OTMwOTA2MA.GmdR3b.PAI4Ic78V0y6VP2ja9g_P7nA9noZ7bUfIp9jWs")
#https://discord.com/api/oauth2/authorize?client_id=1061503873149309060&permissions=8&scope=bot